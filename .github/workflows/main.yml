name: blog_notifier

on:
  workflow_dispatch:
    inputs:
      skip_vercel:
        description: "Skip Vercel deployment"
        required: false
        default: "true"
  push:
    paths:
      - 'src/content/blog/*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_vercel != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Wait for Vercel Deployment
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          wait-for-approval: false
        id: vercel

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      MAILTRAP_API_KEY: ${{ secrets.MAILTRAP_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Restore cache of processed files
      - name: Restore processed files cache
        uses: actions/cache@v3
        with:
          path: .github/workflows/processed_files.json
          key: blog-notifier-${{ runner.os }}-v1
          restore-keys: |
            blog-notifier-${{ runner.os }}-v1

      # Initialize processed files list
      - name: Initialize processed files
        run: |
          FILE=".github/workflows/processed_files.json"
          if [ ! -f $FILE ]; then
            echo "[]" > $FILE
          fi

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Get all blog files (ignore dotfiles)
      - name: Get all blog files
        id: all-files
        run: |
          FILES=$(find src/content/blog -type f ! -name ".*" ! -path "*/.*" | base64 -w0)
          echo "all_files=$FILES" >> $GITHUB_OUTPUT

      # Determine unprocessed files
      - name: Determine unprocessed files
        id: unprocessed
        run: |
          FILE=".github/workflows/processed_files.json"
          NEW_FILES=""
          while read -r f; do
            if ! grep -q "$f" "$FILE"; then
              NEW_FILES="$NEW_FILES $f"
            fi
          done < <(echo "${{ steps.all-files.outputs.all_files }}" | base64 --decode)
          NEW_FILES_CSV=$(echo $NEW_FILES | tr ' ' ',')
          echo "new_files=$NEW_FILES_CSV" >> $GITHUB_OUTPUT
          echo "Unprocessed files: $NEW_FILES_CSV"

      # Fetch confirmed users once
      - name: Get confirmed users
        id: users
        if: steps.unprocessed.outputs.new_files != ''
        run: |
          USERS_JSON=$(node ./scripts/get-users.js)
          echo "users=$USERS_JSON" >> $GITHUB_OUTPUT

      # Send emails for new files
      - name: Send emails
        if: steps.unprocessed.outputs.new_files != '' && steps.users.outputs.users != '[]'
        run: |
          IFS=',' read -ra FILE_ARRAY <<< "${{ steps.unprocessed.outputs.new_files }}"
          for file in "${FILE_ARRAY[@]}"; do
            node ./scripts/send-email.js "$file" '${{ steps.users.outputs.users }}'
            # Update processed files
            jq --arg f "$file" '. += [$f]' .github/workflows/processed_files.json > tmp.json && mv tmp.json .github/workflows/processed_files.json
          done

      # Save updated processed files cache
      - name: Save cache
        uses: actions/cache@v3
        with:
          path: .github/workflows/processed_files.json
          key: blog-notifier-${{ runner.os }}-v1
